{"version":3,"sources":["componentes/Formulario.js","componentes/Resultado.js","componentes/Mensaje.js","componentes/Spinner.js","App.js","helpers.js","serviceWorker.js","index.js"],"names":["Formulario","state","cantidad","plazo","calcularPrestamo","e","preventDefault","_this$state","_this","props","datosPrestamo","actualizarState","_e$target","target","name","value","setState","Object","defineProperty","Number","habilitarSubmit","_this$state2","react_default","a","createElement","onSubmit","this","onChange","type","className","placeholder","disabled","Component","Resultado","total","toFixed","Mensaje","Spinner","App","cargando","totalCantidad","totalPlazo","calcularTotal","setTimeout","componente","componentes_Spinner","componentes_Resultado","componentes_Mensaje","react","componentes_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6912725.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Formulario extends Component {\n     state = { \n          cantidad: '',\n          plazo: ''\n      }\n\n      calcularPrestamo = (e) => {\n          e.preventDefault();\n\n          // aplicar destructuring\n          const {cantidad, plazo} = this.state;\n\n          // pasarlo al componente padre\n          this.props.datosPrestamo(cantidad,plazo);\n     }\n\n      actualizarState = (e) => {\n           // leer los datos del formulario\n          //  console.log(e.target.value );\n\n           const {name, value} = e.target;\n\n           // actualizar el state\n           this.setState({\n                [name] : Number(value)\n           })\n      }\n\n      habilitarSubmit = () => {\n           // aplicar destructuring\n          const { cantidad, plazo } = this.state;\n           // leer las variables\n          const noValido = !cantidad || !plazo\n\n          // console.log(noValido);\n           // retornar una respuesta\n\n           return noValido;\n\n\n      }\n\n     render() {\n          return ( \n               <form onSubmit={ this.calcularPrestamo }>\n                    <div>\n                         <label>Cantidad Prestamo: </label>\n                         <input \n                                onChange={this.actualizarState}\n                                type=\"number\" \n                                name=\"cantidad\" \n                                className=\"u-full-width\" \n                                placeholder=\"Ejemplo: 3000\" />\n                    </div>\n                    <div>\n                         <label>Plazo para pagar:</label>\n                         <select\n                              onChange={this.actualizarState} \n                              name=\"plazo\" className=\"u-full-width\">\n                              <option value=\"\">Seleccionar</option>\n                              <option value=\"3\">3 meses</option>\n                              <option value=\"6\">6 meses</option>\n                              <option value=\"12\">12 meses</option>\n                              <option value=\"24\">24 meses</option>\n                         </select>\n                    </div>\n                    <div>\n                         <input \n                              disabled={this.habilitarSubmit() }\n                              type=\"submit\" \n                              value=\"Calcular\" \n                              className=\"u-full-width button-primary\"/>\n                    </div>\n               </form>\n          );\n     }\n}\n \nexport default Formulario;\n","import React from 'react';\n\nconst Resultado = (props) => {\n\n     return ( \n          <div className=\"u-full-width resultado\">\n               <h2>Resultados</h2>\n               <p>La cantidad Solicitada fue: $ {props.cantidad}</p>\n               <p>A pagar en {props.plazo} Meses</p>\n               <p>Total a pagar: $ {props.total}</p>\n               <p>Su pago mensual es de : $  { (props.total / props.plazo).toFixed(2) } Meses</p>\n          </div>\n      );\n}\n \nexport default Resultado;","import React from 'react';\n\nconst Mensaje = () => {\n     return ( \n          <p>Agrega una cantidad y un plazo para pagar</p>\n      );\n}\n \nexport default Mensaje;","import React from 'react';\nimport '../spinner.css';\n\nconst Spinner = () => {\n     return ( \n          <div className=\"spinner\">\n          <div className=\"rect1\"></div>\n          <div className=\"rect2\"></div>\n          <div className=\"rect3\"></div>\n          <div className=\"rect4\"></div>\n          </div>\n      );\n}\n \nexport default Spinner;","import React, { Component, Fragment } from 'react';\n\nimport './normalize.css';\nimport './skeleton.css';\n\nimport Formulario from './componentes/Formulario';\nimport { calcularTotal } from './helpers';\nimport Resultado from './componentes/Resultado';\nimport Mensaje from './componentes/Mensaje';\nimport Spinner from './componentes/Spinner';\n\nclass App extends Component {\n\n  state = {\n    total : '',\n    cantidad : '',\n    plazo : '',\n    cargando: false\n  }\n\n  datosPrestamo = (cantidad, plazo) => {\n    const total = calcularTotal(cantidad,plazo);\n\n    // colocar el resultado en el state junto a la cantidad y el plazo\n\n    this.setState({\n      cargando : true\n    }, () => {\n      setTimeout(() => {\n        this.setState({\n          total,\n          cantidad,\n          plazo,\n          cargando: false\n        })\n      }, 3000);\n    })\n  }\n\n  render() {\n    const {total,plazo,cantidad, cargando} = this.state;\n\n    // cargar un componente condicionalmente\n    let componente;\n\n    if(total === '' && !cargando ) {\n      componente = <Mensaje />\n    } else if(cargando) {\n      componente = <Spinner />\n    } else {\n      componente = <Resultado\n                    total={total}\n                    plazo={plazo}\n                    cantidad={cantidad}\n                    />\n    }\n    return (\n      <Fragment>\n        <h1>Cotizador de Prestamos</h1>\n          <div className=\"container\">\n            <Formulario \n                datosPrestamo = {this.datosPrestamo}\n            />\n\n            <div className=\"mensajes\">\n              {componente}\n            </div>\n           \n          </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","export function calcularTotal(cantidad,plazo) {\n\n     // Cantidades\n     // O a 1000 = 25%\n     // 1001 a 5000 = 20%\n     // 5001 a 10000 = 15%\n     // +10001 = 10%\n\n     let totalCantidad;\n\n     if(cantidad <= 1000) {\n          totalCantidad = cantidad * .25;\n     } else if(cantidad > 1000 && cantidad <= 5000){\n          totalCantidad = cantidad * .20;\n     } else if(cantidad > 5000 && cantidad <= 10000){\n          totalCantidad = cantidad * .15;\n     } else {\n          totalCantidad = cantidad * .10;\n     }\n\n     // console.log(totalCantidad);\n\n     // meses\n     // 3 = 5%\n     // 6 = 10%\n     // 12 = 15%\n     // 24 = 20%\n\n     let totalPlazo;\n\n     switch (plazo) {\n          case 3:\n               totalPlazo = cantidad * .05;\n               break;\n          case 6:\n               totalPlazo = cantidad * .10;\n               break;\n          case 12:\n               totalPlazo = cantidad * .15;\n               break;\n          case 24:\n               totalPlazo = cantidad * .2;\n               break;\n          \n          default:\n               break;\n     }\n\n     return cantidad + totalPlazo + totalCantidad;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}